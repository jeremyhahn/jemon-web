<?php
/**
 * AgilePHP Framework :: The Rapid "for developers" PHP5 framework
 * Copyright (C) 2009-2010 Make A Byte, inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @package com.makeabyte.agilephp.orm.dialect
 */

/**
 * Defines contract for vendor specific SQL dialect implementations
 *
 * @author Jeremy Hahn
 * @copyright Make A Byte, inc
 * @package com.makeabyte.agilephp.orm.dialect
 */
interface SQLDialect {

	      /**
		   * Adds an SQL distinct clause to 'find' operation.
		   *
		   * @param $columnName The column name to get the distinct values for
		   * @return void
		   */
	  	  public function setDistinct($columnName);

	  	  /**
		   * Returns the 'distinct' column to use in an SQL SELECT statement
		   * if one has been defined.
		   *
		   * @return The DISTINCT column name or null if a column name has not been defined.
		   */
	  	  public function isDistinct();

	      /**
		   * Sets the maximum number of records to return in a result list. Defaults to 25.
		   *
		   * @param $count Maximum number of records to return
		   * @return void
	       */
	      public function setMaxResults($maxResults = 25);

	      /**
	       * Returns the maximum number of results to retrieve. This translates
	       * to an SQL LIMIT clause during SELECT operations.
	       *
	       * @return The maximum number of results to retrieve during SELECT operations.
	       */
	      public function getMaxResults();

		  /**
	       * Returns the last "id" generated by the database engine.
	       *
	       * @param string $name An optional pgsql sequence name. Defaults to null.
	       * @return mixed The id value generated by the database engine during the last INSERT
	       */
	      public function getLastInsertId();

	      /**
	       * Returns boolean flag indicating whether or not a transaction is in progress.
	       *
	       * @return bool True if a transaction is in progress, false otherwise.
	       */
	      public function hasTransactionInProgress();

	      /**
	  	   * Begins a transaction
	  	   *
	  	   * @return void
	  	   * @throws ORMException
	  	   * @see http://us2.php.net/manual/en/pdo.transactions.php
	  	   * @see http://usphp.com/manual/en/function.PDO-beginTransaction.php
	  	   */
	  	  public function beginTransaction();

	  	  /**
	  	   * Commits an already started transaction.
	  	   *
	  	   * @return void
	  	   * @throws ORMException
	  	   * @see http://us2.php.net/manual/en/pdo.transactions.php
	  	   * @see http://usphp.com/manual/en/function.PDO-commit.php
	  	   */
	  	  public function commit();

	  	  /**
	  	   * Rolls back a transaction.
	  	   *
	  	   * @param $message Error/reason why the transaction was rolled back
	  	   * @param $code An error/reason code
	  	   * @return void
	  	   * @throws ORMException
	  	   * @see http://us2.php.net/manual/en/pdo.transactions.php
	  	   * @see http://usphp.com/manual/en/function.PDO-rollBack.php
	  	   */
	  	  public function rollBack($message = null, $code = 0);

	  	  /**
		   * Prepares an SQL prepared statement
		   *
		   * @param $statement The SQL statement to prepare
		   * @return False if the statement could not execute successfully
		   * @see http://usphp.com/manual/en/function.PDO-prepare.php
	  	   */
	  	  public function prepare($statement);

	  	  /**
	  	   * Executes a prepared statement (with parameters)
	  	   *
	  	   * @param $inputParameters An array of input parameters
	  	   * @return True if successful, false on fail
	  	   * @see http://usphp.com/manual/en/function.PDOStatement-execute.php
	  	   */
	  	  public function execute(array $inputParameters = array());

		  /**
	  	   * Executes an SQL statement and returns the number of rows affected by the query.
	  	   *
	  	   * @param $statement The SQL statement to execute.
	  	   * @return The number of rows affected by the query.
	  	   * @see http://usphp.com/manual/en/function.PDO-exec.php
	  	   */
	  	  public function exec($statement);

	  	  /**
	  	   * Quotes a string so its theoretically safe to pass into a statement
	  	   * without the worry of SQL injection.
	  	   *
	       * @param $data The data to quote
	  	   * @return The quoted data
	  	   * @see http://www.php.net/manual/en/pdo.quote.php
	  	   */
	  	  public function quote($data);

		  /**
	   	   * Executes a raw SQL query using PDO::query
	   	   *
	   	   * @param $sql The SQL statement to execute
	   	   * @return PDO::PDOStatement as returned by PDO::query
	   	   */
	  	  public function query($sql);

	      /**
	       * Sets WHERE clause restrictions
	       *
	       * @param $restrictions An associative array containing WHERE clause restrictions. (For example: array('id' => 21))
	       * @return void
	       */
	      public function setRestrictions(array $restrictions);

	      /**
	       * Sets the restriction operator (and|or) used in SQL WHERE clause.
	       *
	       * @param $operator The logical operator 'and'/'or' to be used in SQL WHERE clause. Default is 'AND'.
	       * @return void
	       */
	      public function setRestrictionsLogicOperator($operator);

	      /**
	       * Sets the SQL 'group by' clause.
	       *
	       * @param $column The column name to group the result set by
	       * @return void
	       */
	      public function setGroupBy($column);

	      /**
	       * Returns SQL GROUP BY clause.
	       *
	       * @return String GROUP BY value
	       */
	      public function getGroupBy();

	      /**
	       * Sets the SQL 'order by' clause.
	       *
	       * @param $column The column name to order the result set by
	       * $param $direction The direction to sort the result set (ASC|DESC).
	       * @return void
	       */
	      public function setOrderBy($column, $direction);

	      /**
	       * Returns an associative array containing the current 'orderBy' clause. The results
	       * are returned with the name of the column as the index and the direction as the value.
	       *
	       * @return An associative array containing the name of the column to sort as the key/index
	       * 		and the direction of the sort order (ASC|DESC) as the value.
	       */
	      public function getOrderBy();

	  	  /**
	       * Returns the 'Table' object which is mapped to the specified $model.
	       *
	       * @param DomainModel $model The domain model object to retrieve the table element for. Defaults to the model
	       * 			   			   currently being managed by the ORM.
	       * @return Table The Table object responsible for the model's ORM or null if a table
	       * 		 could not be located for the specified $model.
	       * @throws ORMException
	       */
	      public function getTableByModel(DomainModel $model = null);

	      /**
	       * Returns a 'Table' object representing the table configured in orm.xml as
	       * the AgilePHP 'Identity' table.
	       *
	       * @return The 'Table' object which represents the AgilePHP 'Identity' table, or null
	       * 		 if an 'Identity' table has not been configured.
	       */
	      public function getTableByModelName($modelName);

		  /**
	       * Creates an accessor method from the $property parameter. The $property
	       * will be returned with the prefix 'get' and the first letter of the property
	       * uppercased.
	       *
	       * @param $property The name of the property to convert to an accessor method name
	       * @return The accessor string
	       */
	      public function toAccessor($property);

	      /**
	       * Creates a mutator method from the $property parameter. The $property
	       * will be returned with the prefix 'set' and the first letter of the property
	       * uppercased.
	       *
	       * @param $property The name of the property to convert to a mutator method name
	       * @return The mutator string
	       */
	      public function toMutator($property);

		  /**
		   * Creates the active database in use by the ORM framework
		   * (defined in orm.xml).
		   *
		   * @return void
		   */
		  public function create();

		  /**
		   * Creates the specified table in the active database in use by the ORM framework
		   *
		   * @param Table $table The table instance to create
		   * @return void
		   * @throws ORMException
		   */
		  public function createTable(Table $table);

		  /**
	   	   * Drops the active database in use by the ORM framework
	   	   * (defined in orm.xml).
	   	   *
	   	   * @return void
	   	   * @throws ORMException
	   	   */
	  	  public function drop();

	  	  /**
	   	   * Drops the specified table from the active database in use
	   	   * by the ORM framework (defined in orm.xml).
	   	   *
	   	   * @param Table $table The table to drop
	   	   * @return void
	   	   * @throws ORMException
	   	   */
	  	  public function dropTable(Table $table);

	  	 /**
	   	  * Persists a domain model object
	   	  *
		  * @param DomainModel $model The model object to persist
		  * @return PDOStatement
		  * @throws ORMException
		  */
  	     public function persist(DomainModel $model);

	  	 /**
	   	  * Merges/updates a persisted domain model object
	   	  *
		  * @param DomainModel $model The model object to merge/update
		  * @return PDOStatement
		  * @throws ORMException
		  */
	  	 public function merge(DomainModel $model);

		 /**
		  * Deletes a persisted domain model object
	   	  *
		  * @param DomainModel $model The domain model object to delete
		  * @return PDOStatement
		  * @throws ORMException
		  */
		 public function delete(DomainModel $model);

	  	 /**
	   	  * Truncates the table for the specified domain model object
	   	  *
		  * @param DomainModel $model A domain model object
		  * @return PDOStatement
		  * @throws ORMException
		  */
		 public function truncate(DomainModel $model);

	  	 /**
	   	  * Attempts to locate the specified model by primary key value.
	      *
	   	  * @param DomainModel $model A domain model object with its primary key field set
	      * @return Returns the same model which was passed (populated with the
	      * 		 database values) or null if a matching record could not be found.
	      * @throws ORMException
	      */
	  	 public function find(DomainModel $model);

	  	 /**
	  	  * Calls a stored procedure.
	  	  *
	  	  * @param DomainModel $model ActiveRecord model state representing the stored procedure
	  	  * @return mixed The stored procedure return value or null if the stored procedure does not return. It
	  	  *         is recommended to return a "table" / "record set" which is mapped to a DomainModel.
	  	  */
	  	 public function call(DomainModel $model);

	  	 /**
		  * Reverse engineers the active database and returns a Database object that represents
		  * the physical database.
		  *
		  * @return Database A database object that represents the physical database
		  */
	  	 public function reverseEngineer();

	     /**
		  * Returns boolean response based on whether or not a connection to the database exists.
		  *
		  * @return int -1 = No connection to the database server
		  * 			  0 = Connected to the database server but not bound to a database
		  * 			  1 = Connected to the database server and bound to a database
		  */
	     public function isConnected();
}
?>